{
  "name": "expandtesting",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "1 - Check the health of the API Notes services",
      "seq": 1,
      "request": {
        "url": "{{base_url}}/health-check",
        "method": "GET",
        "headers": [],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseCAPIH = res.getBody();\r\n\r\ntest(\"1 - Check api health success\", function () {\r\n    expect(responseCAPIH.success).to.be.equal(true);\r\n});\r\ntest(\"1 - Check api health status\", function () {\r\n    expect(responseCAPIH.status).to.be.equal(200);\r\n});\r\ntest(\"1 - Check api health message\", function () {\r\n    expect(responseCAPIH.message).to.be.equal(\"Notes API is Running\");\r\n});\r\n\r\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "10-1 - Get note by ID",
      "seq": 23,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGN = res.getBody();\r\n\r\ntest(\"10.1 - Check get note by ID success\", function () {\r\n    expect(responseGN.success).to.be.equal(true);\r\n});\r\ntest(\"10.1 - Check get note by ID status\", function () {\r\n    expect(responseGN.status).to.be.equal(200);\r\n});\r\ntest(\"10.1 - Check get note by ID message\", function () {\r\n    expect(responseGN.message).to.be.equal(\"Note successfully retrieved\");\r\n});\r\ntest(\"10.1 - Assert note id\", function () {\r\n    expect(bru.getEnvVar(\"note_id\")).to.be.equal(responseGN.data.id);\r\n});\r\ntest(\"10.1 - Assert note title\", function () {\r\n    expect(bru.getEnvVar(\"note_title\")).to.be.equal(responseGN.data.title);\r\n});\r\ntest(\"10.1 - Assert note description\", function () {\r\n    expect(bru.getEnvVar(\"note_description\")).to.be.equal(responseGN.data.description);\r\n});\r\ntest(\"10.1 - Assert note category\", function () {\r\n    expect(bru.getEnvVar(\"note_category\")).to.be.equal(responseGN.data.category);\r\n});\r\ntest(\"10.1 - Assert note completed\", function () {\r\n    expect(bru.getEnvVar(\"note_completed\")).to.be.equal(responseGN.data.completed);\r\n});\r\ntest(\"10.1 - Assert note created_at\", function () {\r\n    expect(bru.getEnvVar(\"note_created_at\")).to.be.equal(responseGN.data.created_at);\r\n});\r\ntest(\"10.1 - Assert note updated_at\", function () {\r\n    expect(bru.getEnvVar(\"note_updated_at\")).to.be.equal(responseGN.data.updated_at);\r\n});\r\ntest(\"10.1 - Assert user id for note\", function () {\r\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseGN.data.user_id);\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "10-2 - Get note by ID - bad request",
      "seq": 24,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          },
          {
            "name": "x-content-format",
            "value": "badRequest",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGNBR = res.getBody();\r\n\r\ntest(\"10.2 - Check get note by ID - bad request success\", function () {\r\n    expect(responseGNBR.success).to.be.equal(false);\r\n});\r\ntest(\"10.2 - Check get note by ID - bad request status\", function () {\r\n    expect(responseGNBR.status).to.be.equal(400);\r\n});\r\ntest(\"10.2 - Check get note by ID - bad request message\", function () {\r\n    expect(responseGNBR.message).to.be.equal(\"Invalid X-Content-Format header, Only application/json is supported.\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "10-3 - Get note by ID - unauthorized request",
      "seq": 25,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGNUR = res.getBody();\r\n\r\ntest(\"10.3 - Check get note by ID - unauthorized request success\", function () {\r\n    expect(responseGNUR.success).to.be.equal(false);\r\n});\r\ntest(\"10.3 - Check get note by ID - unauthorized request status\", function () {\r\n    expect(responseGNUR.status).to.be.equal(401);\r\n});\r\ntest(\"10.3 - Check get note by ID - unauthorized request message\", function () {\r\n    expect(responseGNUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "11-1 - Update an existing note",
      "seq": 26,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PUT",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"{{note_category}}\",\n    \"completed\":\"{{note_completed}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"note_category\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\nbru.setEnvVar(\"note_description\", bru.getEnvVar(\"randomValue\")+\" description\");\nbru.setEnvVar(\"note_title\", bru.getEnvVar(\"randomValue\")+\" title\");\nbru.setEnvVar(\"note_completed\", \"true\");"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseUN = res.getBody();\n\ntest(\"11.1  - Check update an existing note success\", function () {\n    expect(responseUN.success).to.be.equal(true);\n});\ntest(\"11.1  - Check update an existing note status\", function () {\n    expect(responseUN.status).to.be.equal(200);\n});\ntest(\"11.1  - Check update an existing note message\", function () {\n    expect(responseUN.message).to.be.equal(\"Note successfully Updated\");\n});\ntest(\"11.1  - Assert note id\", function () {\n    expect(bru.getEnvVar(\"note_id\")).to.be.equal(responseUN.data.id);\n});\ntest(\"11.1  - Assert note title\", function () {\n    expect(bru.getEnvVar(\"note_title\")).to.be.equal(responseUN.data.title);\n});\ntest(\"11.1  - Assert note description\", function () {\n    expect(bru.getEnvVar(\"note_description\")).to.be.equal(responseUN.data.description);\n});\ntest(\"11.1  - Assert note category\", function () {\n    expect(bru.getEnvVar(\"note_category\")).to.be.equal(responseUN.data.category);\n});\ntest(\"11.1  - Assert note completed\", function () {\n    // It uses == due to the fact that the compared values are a boolean and a string\n    expect(bru.getEnvVar(\"note_completed\")) == (responseUN.data.completed);\n});\ntest(\"11.1  - Assert note created_at\", function () {\n    expect(bru.getEnvVar(\"note_created_at\")).to.be.equal(responseUN.data.created_at);\n});\ntest(\"11.1  - Assert user id for note\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseUN.data.user_id);\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "11-2 - Update an existing note - bad request",
      "seq": 27,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PUT",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"a\",\n    \"completed\":\"{{note_completed}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseUNBR = res.getBody();\r\n\r\ntest(\"11.2  - Check update an existing note - bad request success\", function () {\r\n    expect(responseUNBR.success).to.be.equal(false);\r\n});\r\ntest(\"11.2  - Check update an existing note - bad request status\", function () {\r\n    expect(responseUNBR.status).to.be.equal(400);\r\n});\r\ntest(\"11.2  - Check update an existing note - bad request message\", function () {\r\n    expect(responseUNBR.message).to.be.equal(\"Category must be one of the categories: Home, Work, Personal\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "11-3 - Update an existing note - unauthorized request",
      "seq": 28,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PUT",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"{{note_category}}\",\n    \"completed\":\"{{note_completed}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseUNBR = res.getBody();\r\n\r\ntest(\"11.3  - Check update an existing note - unauthorized request success\", function () {\r\n    expect(responseUNBR.success).to.be.equal(false);\r\n});\r\ntest(\"11.3  - Check update an existing note - unauthorized request status\", function () {\r\n    expect(responseUNBR.status).to.be.equal(401);\r\n});\r\ntest(\"11.3  - Check update an existing note - unauthorized request message\", function () {\r\n    expect(responseUNBR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "12-1 - Update the completed status of a note",
      "seq": 29,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"completed\":\"{{note_completed}}\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "if (bru.getEnvVar(\"note_completed\") == false) { \r\nbru.setEnvVar(\"note_completed\", true);\r\n}\r\nelse { \r\nbru.setEnvVar(\"note_completed\", false);\r\n}"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseUCSN = res.getBody();\n\ntest(\"12.1 - Check update the completed status of a note success\", function () {\n    expect(responseUCSN.success).to.be.equal(true);\n});\ntest(\"12.1 - Check update the completed status of a note status\", function () {\n    expect(responseUCSN.status).to.be.equal(200);\n});\ntest(\"12.1 - Check update the completed status of a note message\", function () {\n    expect(responseUCSN.message).to.be.equal(\"Note successfully Updated\");\n});\ntest(\"12.1 - Assert note id\", function () {\n    expect(bru.getEnvVar(\"note_id\")).to.be.equal(responseUCSN.data.id);\n});\ntest(\"12.1 - Assert note title\", function () {\n    expect(bru.getEnvVar(\"note_title\")).to.be.equal(responseUCSN.data.title);\n});\ntest(\"12.1 - Assert note description\", function () {\n    expect(bru.getEnvVar(\"note_description\")).to.be.equal(responseUCSN.data.description);\n});\ntest(\"12.1 - Assert note category\", function () {\n    expect(bru.getEnvVar(\"note_category\")).to.be.equal(responseUCSN.data.category);\n});\ntest(\"12.1 - Assert note completed\", function () {\n    // It uses == due to the fact that the compared values are a boolean and a string\n    expect(bru.getEnvVar(\"note_completed\")) == (responseUCSN.data.completed);\n});\ntest(\"12.1 - Assert note created_at\", function () {\n    expect(bru.getEnvVar(\"note_created_at\")).to.be.equal(responseUCSN.data.created_at);\n});\ntest(\"12.1 - Assert user id for note\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseUCSN.data.user_id);\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "12-2 - Update the completed status of a note - bad request",
      "seq": 30,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"completed\":\"a\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseUCSNBR = res.getBody();\r\n\r\ntest(\"12.2 - Check update the completed status of a note - bad request success\", function () {\r\n    expect(responseUCSNBR.success).to.be.equal(false);\r\n});\r\ntest(\"12.2 - Check update the completed status of a note - bad request status\", function () {\r\n    expect(responseUCSNBR.status).to.be.equal(400);\r\n});\r\ntest(\"12.2 - Check update the completed status of a note - bad request message\", function () {\r\n    expect(responseUCSNBR.message).to.be.equal(\"Note completed status must be boolean\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "12-3 - Update the completed status of a note - unauthorized request",
      "seq": 31,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"completed\":\"{{note_completed}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "if (bru.getEnvVar(\"note_completed\") == false) { \nbru.setEnvVar(\"note_completed\", true);\n}\nelse { \nbru.setEnvVar(\"note_completed\", false);\n}"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseUCSNUR = res.getBody();\r\n\r\ntest(\"12.3 - Check update the completed status of a note - unauthorized request success\", function () {\r\n    expect(responseUCSNUR.success).to.be.equal(false);\r\n});\r\ntest(\"12.3 - Check update the completed status of a note - unauthorized request status\", function () {\r\n    expect(responseUCSNUR.status).to.be.equal(401);\r\n});\r\ntest(\"12.3 - Check update the completed status of a note - unauthorized request message\", function () {\r\n    expect(responseUCSNUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "13-1 - Delete a note by ID - bad request",
      "seq": 32,
      "request": {
        "url": "{{base_url}}/notes/@{{note_id}}",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDNBR = res.getBody();\r\n\r\ntest(\"13.1 - Check delete a note by ID - bad request success\", function () {\r\n    expect(responseDNBR.success).to.be.equal(false);\r\n});\r\ntest(\"13.1 - Check delete a note by ID - bad request status\", function () {\r\n    expect(responseDNBR.status).to.be.equal(400);\r\n});\r\ntest(\"13.1 - Check delete a note by ID - bad request message\", function () {\r\n    expect(responseDNBR.message).to.be.equal(\"Note ID must be a valid ID\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "13-2 - Delete a note by ID - unauthorized request",
      "seq": 33,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDNUR = res.getBody();\r\n\r\ntest(\"13.2 - Check delete a note by ID - unauthorized request success\", function () {\r\n    expect(responseDNUR.success).to.be.equal(false);\r\n});\r\ntest(\"13.2 - Check delete a note by ID - unauthorized request status\", function () {\r\n    expect(responseDNUR.status).to.be.equal(401);\r\n});\r\ntest(\"13.2 - Check delete a note by ID - unauthorized request message\", function () {\r\n    expect(responseDNUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "13-3 - Delete a note by ID",
      "seq": 34,
      "request": {
        "url": "{{base_url}}/notes/{{note_id}}",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDN = res.getBody();\r\n\r\ntest(\"13.3 - Check delete a note by ID success\", function () {\r\n    expect(responseDN.success).to.be.equal(true);\r\n});\r\ntest(\"13.3 - Check delete a note by ID status\", function () {\r\n    expect(responseDN.status).to.be.equal(200);\r\n});\r\ntest(\"13.3 - Check delete a note by ID message\", function () {\r\n    expect(responseDN.message).to.be.equal(\"Note successfully deleted\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "14-1 - Log out a user - bad request",
      "seq": 35,
      "request": {
        "url": "{{base_url}}/users/logout",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          },
          {
            "name": "x-content-format",
            "value": "badRequest",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLOUBR = res.getBody();\r\n\r\ntest(\"14.1 - Check log out a user - bad request success\", function () {\r\n    expect(responseLOUBR.success).to.be.equal(false);\r\n});\r\ntest(\"14.1 - Check log out a user - bad request status\", function () {\r\n    expect(responseLOUBR.status).to.be.equal(400);\r\n});\r\ntest(\"14.1 - Check log out a user - bad request message\", function () {\r\n    expect(responseLOUBR.message).to.be.equal(\"Invalid X-Content-Format header, Only application/json is supported.\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "14-2 - Log out a user - unauthorized request",
      "seq": 36,
      "request": {
        "url": "{{base_url}}/users/logout",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLOUUR = res.getBody();\r\n\r\ntest(\"14.2 - Check log out a user - unauthorized request success\", function () {\r\n    expect(responseLOUUR.success).to.be.equal(false);\r\n});\r\ntest(\"14.2 - Check log out a user - unauthorized request status\", function () {\r\n    expect(responseLOUUR.status).to.be.equal(401);\r\n});\r\ntest(\"14.2 - Check log out a user - unauthorized request message\", function () {\r\n    expect(responseLOUUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "14-3 - Log out a user",
      "seq": 37,
      "request": {
        "url": "{{base_url}}/users/logout",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLOU = res.getBody();\r\n\r\ntest(\"14.3 - Check log out a user success\", function () {\r\n    expect(responseLOU.success).to.be.equal(true);\r\n});\r\ntest(\"14.3 - Check log out a user status\", function () {\r\n    expect(responseLOU.status).to.be.equal(200);\r\n});\r\ntest(\"14.3 - Check log out a user message\", function () {\r\n    expect(responseLOU.message).to.be.equal(\"User has been successfully logged out\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "15 - Log in after log out",
      "seq": 38,
      "request": {
        "url": "{{base_url}}/users/login",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"email\":\"{{user_email}}\",\r\n    \"password\":\"{{user_password}}\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLIALOU = res.getBody();\r\n\r\nbru.setEnvVar(\"user_token\", responseLIALOU.data.token);\r\n\r\ntest(\"15 - Check log in after log out success\", function () {\r\n    expect(responseLIALOU.success).to.be.equal(true);\r\n});\r\ntest(\"15 - Check log in after log out status\", function () {\r\n    expect(responseLIALOU.status).to.be.equal(200);\r\n});\r\ntest(\"15 - Check log in after log out message\", function () {\r\n    expect(responseLIALOU.message).to.be.equal(\"Login successful\");\r\n});\r\ntest(\"15 - Assert user id\", function () {\r\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseLIALOU.data.id);\r\n});\r\ntest(\"15 - Assert user name\", function () {\r\n    expect(bru.getEnvVar(\"user_name\")).to.be.equal(responseLIALOU.data.name);\r\n});\r\ntest(\"15 - Assert user e-mail\", function () {\r\n    expect(bru.getEnvVar(\"user_email\")).to.be.equal(responseLIALOU.data.email);\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "16-1 - Delete user account - bad request",
      "seq": 39,
      "request": {
        "url": "{{base_url}}/users/delete-account",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          },
          {
            "name": "x-content-format",
            "value": "badRequest",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDUBR = res.getBody();\r\n\r\ntest(\"16.1 - Check delete user account - bad request success\", function () {\r\n    expect(responseDUBR.success).to.be.equal(false);\r\n});\r\ntest(\"16.1 - Check delete user account - bad request status\", function () {\r\n    expect(responseDUBR.status).to.be.equal(400);\r\n});\r\ntest(\"16.1 - Check delete user account - bad request message\", function () {\r\n    expect(responseDUBR.message).to.be.equal(\"Invalid X-Content-Format header, Only application/json is supported.\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "16-2 - Delete user account - unauthorized request",
      "seq": 40,
      "request": {
        "url": "{{base_url}}/users/delete-account",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDUUR = res.getBody();\r\n\r\ntest(\"16.2 - Check delete user account - unauthorized request success\", function () {\r\n    expect(responseDUUR.success).to.be.equal(false);\r\n});\r\ntest(\"16.2 - Check delete user account - unauthorized request status\", function () {\r\n    expect(responseDUUR.status).to.be.equal(401);\r\n});\r\ntest(\"16.2 - Check delete user account - unauthorized request message\", function () {\r\n    expect(responseDUUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "2-1 - Creates a new user account",
      "seq": 2,
      "request": {
        "url": "{{base_url}}/users/register",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"name\":\"{{user_name}}\",\n    \"email\":\"{{user_email}}\",\n    \"password\":\"{{user_password}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var random = Math.floor(Math.random() * 1000)+1000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"user_name\", bru.getEnvVar(\"randomValue\")+\" test\");\n\nbru.setEnvVar(\"user_email\", bru.getEnvVar(\"randomValue\")+\"@test.com\");\n\nbru.setEnvVar(\"user_password\", bru.getEnvVar(\"randomValue\")+\"_pw\");\n\n\n\n\n\n\n\n\n\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseCU = res.getBody();\n\nbru.setEnvVar(\"user_id\", responseCU.data.id);\n\ntest(\"2.1 - Check creates a new user account success\", function () {\n    expect(responseCU.success).to.be.equal(true);\n});\ntest(\"2.1 - Check creates a new user account status\", function () {\n    expect(responseCU.status).to.be.equal(201);\n});\ntest(\"2.1 - Check creates a new user account message\", function () {\n    expect(responseCU.message).to.be.equal(\"User account created successfully\");\n});\ntest(\"2.1 - Assert created name\", function () {\n    expect(responseCU.data.name).to.be.equal(bru.getEnvVar(\"user_name\"));\n});\ntest(\"2.1 - Assert created e-mail\", function () {\n    expect(responseCU.data.email).to.be.equal(bru.getEnvVar(\"user_email\"));\n});\n\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "2-2 - Creates a new user account  - bad request",
      "seq": 3,
      "request": {
        "url": "{{base_url}}/users/register",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"name\":\"{{user_name}}\",\n    \"email\":\"@{{user_email}}\",\n    \"password\":\"{{user_password}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "\n\n\n\n\n\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseCUBR = res.getBody();\r\n\r\ntest(\"2.2 - Check creates a new user account - bad request success\", function () {\r\n    expect(responseCUBR.success).to.be.equal(false);\r\n});\r\ntest(\"2.2 - Check creates a new user account - bad request status\", function () {\r\n    expect(responseCUBR.status).to.be.equal(400);\r\n});\r\ntest(\"2.2 - Check creates a new user account - bad request message\", function () {\r\n    expect(responseCUBR.message).to.be.equal(\"A valid email address is required\");\r\n});\r\n\r\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "3-1 - Log in as an existing user",
      "seq": 4,
      "request": {
        "url": "{{base_url}}/users/login",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"email\":\"{{user_email}}\",\r\n    \"password\":\"{{user_password}}\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLU = res.getBody();\r\n\r\nbru.setEnvVar(\"user_token\", responseLU.data.token);\r\n\r\ntest(\"3.1 - Check log in as an existing user success\", function () {\r\n    expect(responseLU.success).to.be.equal(true);\r\n});\r\ntest(\"3.1 - Check log in as an existing user status\", function () {\r\n    expect(responseLU.status).to.be.equal(200);\r\n});\r\ntest(\"3.1 - Check log in as an existing user message\", function () {\r\n    expect(responseLU.message).to.be.equal(\"Login successful\");\r\n});\r\ntest(\"3.1 - Assert user id\", function () {\r\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseLU.data.id);\r\n});\r\ntest(\"3.1 - Assert user name\", function () {\r\n    expect(bru.getEnvVar(\"user_name\")).to.be.equal(responseLU.data.name);\r\n});\r\ntest(\"3.1 - Assert user e-mail\", function () {\r\n    expect(bru.getEnvVar(\"user_email\")).to.be.equal(responseLU.data.email);\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "3-2 - Log in as an existing user - bad request",
      "seq": 5,
      "request": {
        "url": "{{base_url}}/users/login",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"email\":\"@{{user_email}}\",\r\n    \"password\":\"{{user_password}}\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLUBR = res.getBody();\r\n\r\ntest(\"3.2 - Check log in as an existing user - bad request success\", function () {\r\n    expect(responseLUBR.success).to.be.equal(false);\r\n});\r\ntest(\"3.2 - Check log in as an existing user - bad request status\", function () {\r\n    expect(responseLUBR.status).to.be.equal(400);\r\n});\r\ntest(\"3.2 - Check log in as an existing user - bad request message\", function () {\r\n    expect(responseLUBR.message).to.be.equal(\"A valid email address is required\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "3-3 - Log in as an existing user - unauthorized request",
      "seq": 6,
      "request": {
        "url": "{{base_url}}/users/login",
        "method": "POST",
        "headers": [],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"email\":\"{{user_email}}\",\r\n    \"password\":\"@{{user_password}}\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseLUUR = res.getBody();\r\n\r\ntest(\"3.3 - Check log in as an existing user - unauthorized request success\", function () {\r\n    expect(responseLUUR.success).to.be.equal(false);\r\n});\r\ntest(\"3.3 - Check log in as an existing user - unauthorized request status\", function () {\r\n    expect(responseLUUR.status).to.be.equal(401);\r\n});\r\ntest(\"3.3 - Check log in as an existing user - unauthorized request message\", function () {\r\n    expect(responseLUUR.message).to.be.equal(\"Incorrect email address or password\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "4-1 - Retrieve user profile information",
      "seq": 7,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseRU = res.getBody();\r\n\r\ntest(\"4.1 - Check retrieve user profile information success\", function () {\r\n    expect(responseRU.success).to.be.equal(true);\r\n});\r\ntest(\"4.1 - Check retrieve user profile information status\", function () {\r\n    expect(responseRU.status).to.be.equal(200);\r\n});\r\ntest(\"4.1 - Check retrieve user profile information message\", function () {\r\n    expect(responseRU.message).to.be.equal(\"Profile successful\");\r\n});\r\ntest(\"4.1 - Assert user id\", function () {\r\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseRU.data.id);\r\n});\r\ntest(\"4.1 - Assert user name\", function () {\r\n    expect(bru.getEnvVar(\"user_name\")).to.be.equal(responseRU.data.name);\r\n});\r\ntest(\"4 - Assert user e-mail\", function () {\r\n    expect(bru.getEnvVar(\"user_email\")).to.be.equal(responseRU.data.email);\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "4-2 - Retrieve user profile information - bad request",
      "seq": 8,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          },
          {
            "name": "x-content-format",
            "value": "badRequest",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseRUBR = res.getBody();\r\n\r\ntest(\"4.2 - Check retrieve user profile information - bad request success\", function () {\r\n    expect(responseRUBR.success).to.be.equal(false);\r\n});\r\ntest(\"4.2 - Check retrieve user profile information - bad request status\", function () {\r\n    expect(responseRUBR.status).to.be.equal(400);\r\n});\r\ntest(\"4.2 - Check retrieve user profile information - bad request message\", function () {\r\n    expect(responseRUBR.message).to.be.equal(\"Invalid X-Content-Format header, Only application/json is supported.\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "4-3 - Retrieve user profile information - unauthorized request",
      "seq": 9,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseRUUR = res.getBody();\r\n\r\ntest(\"4.3 - Check retrieve user profile information - unauthorized request success\", function () {\r\n    expect(responseRUUR.success).to.be.equal(false);\r\n});\r\ntest(\"4.3 - Check retrieve user profile information - unauthorized request status\", function () {\r\n    expect(responseRUUR.status).to.be.equal(401);\r\n});\r\ntest(\"4.3 - Check retrieve user profile information - unauthorized request message\", function () {\r\n    expect(responseRUUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "5-1 - Update the user profile information",
      "seq": 10,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"name\":\"{{user_name}}\",\n    \"phone\":\"{{user_phone}}\",\n    \"company\":\"{{user_company}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var random = Math.floor(Math.random() * 100000)+1000000000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"user_name\", bru.getEnvVar(\"randomValue\")+\" test\");\n\nbru.setEnvVar(\"user_phone\", bru.getEnvVar(\"randomValue\"));\n\nbru.setEnvVar(\"user_company\", bru.getEnvVar(\"randomValue\")+\" S.A.\");\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseUU = res.getBody();\n\ntest(\"5.1 - Check update the user profile information success\", function () {\n    expect(responseUU.success).to.be.equal(true);\n});\ntest(\"5.1 - Check update the user profile information status\", function () {\n    expect(responseUU.status).to.be.equal(200);\n});\ntest(\"5.1 - Check update the user profile information message\", function () {\n    expect(responseUU.message).to.be.equal(\"Profile updated successful\");\n});\ntest(\"5.1 - Assert user id\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseUU.data.id);\n});\ntest(\"5.1 - Assert user name\", function () {\n    expect(bru.getEnvVar(\"user_name\")).to.be.equal(responseUU.data.name);\n});\ntest(\"5.1 - Assert user e-mail\", function () {\n    expect(bru.getEnvVar(\"user_email\")).to.be.equal(responseUU.data.email);\n});\ntest(\"5.1 - Assert user phone\", function () {\n    expect(bru.getEnvVar(\"user_phone\")).to.be.equal(responseUU.data.phone);\n});\ntest(\"5.1 - Assert user company\", function () {\n    expect(bru.getEnvVar(\"user_company\")).to.be.equal(responseUU.data.company);\n});\n\n\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "5-2 - Update the user profile information - bad request",
      "seq": 11,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"name\":\"6@#\",\n    \"phone\":\"{{user_phone}}\",\n    \"company\":\"{{user_company}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseUUBR = res.getBody();\r\n\r\ntest(\"5.2 - Check update the user profile information - bad request success\", function () {\r\n    expect(responseUUBR.success).to.be.equal(false);\r\n});\r\ntest(\"5.2 - Check update the user profile information - bad request status\", function () {\r\n    expect(responseUUBR.status).to.be.equal(400);\r\n});\r\ntest(\"5.2 - Check update the user profile information - bad request message\", function () {\r\n    expect(responseUUBR.message).to.be.equal(\"User name must be between 4 and 30 characters\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "6-1 - Change a user-s password",
      "seq": 13,
      "request": {
        "url": "{{base_url}}/users/change-password",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"currentPassword\":\"{{user_password}}\",\n    \"newPassword\":\"{{new_user_password}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var random = Math.floor(Math.random() * 1000)+1000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"new_user_password\", bru.getEnvVar(\"randomValue\")+\"_new_pw\");"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseCUP = res.getBody();\n\nbru.setEnvVar(\"user_password\", bru.getEnvVar(\"new_user_password\"));\n\ntest(\"6.1 - Check api health success\", function () {\n    expect(responseCUP.success).to.be.equal(true);\n});\ntest(\"6.1 - Check api health status\", function () {\n    expect(responseCUP.status).to.be.equal(200);\n});\ntest(\"6.1 - Check api health message\", function () {\n    expect(responseCUP.message).to.be.equal(\"The password was successfully updated\");\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "5-3 - Update the user profile information - unauthorized request",
      "seq": 12,
      "request": {
        "url": "{{base_url}}/users/profile",
        "method": "PATCH",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"name\":\"{{user_name}}\",\n    \"phone\":\"{{user_phone}}\",\n    \"company\":\"{{user_company}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseUUUR = res.getBody();\r\n\r\ntest(\"5.3 - Check update the user profile information - unauthorized request success\", function () {\r\n    expect(responseUUUR.success).to.be.equal(false);\r\n});\r\ntest(\"5.3 - Check update the user profile information - unauthorized request status\", function () {\r\n    expect(responseUUUR.status).to.be.equal(401);\r\n});\r\ntest(\"5.3 - Check update the user profile information - unauthorized request message\", function () {\r\n    expect(responseUUUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "6-2 - Change a user-s password - bad request",
      "seq": 14,
      "request": {
        "url": "{{base_url}}/users/change-password",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\r\n    \"currentPassword\":\"{{user_password}}\",\r\n    \"newPassword\":\"123\"\r\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseCUPBR = res.getBody();\r\n\r\ntest(\"6.2 - Check api health - bad request success\", function () {\r\n    expect(responseCUPBR.success).to.be.equal(false);\r\n});\r\ntest(\"6.2 - Check api health - bad request status\", function () {\r\n    expect(responseCUPBR.status).to.be.equal(400);\r\n});\r\ntest(\"6.2 - Check api health - bad request message\", function () {\r\n    expect(responseCUPBR.message).to.be.equal(\"New password must be between 6 and 30 characters\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "6-3 - Change a user-s password - unauthorized request",
      "seq": 15,
      "request": {
        "url": "{{base_url}}/users/change-password",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"currentPassword\":\"{{user_password}}\",\n    \"newPassword\":\"{{new_user_password}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseCUPUR = res.getBody();\r\n\r\ntest(\"6.3 - Check api health - unauthorized request success\", function () {\r\n    expect(responseCUPUR.success).to.be.equal(false);\r\n});\r\ntest(\"6.3 - Check api health - unauthorized request status\", function () {\r\n    expect(responseCUPUR.status).to.be.equal(401);\r\n});\r\ntest(\"6.3 - Check api health - unauthorized request message\", function () {\r\n    expect(responseCUPUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "7-1 - Creates a new note",
      "seq": 16,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"{{note_category}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"note_category\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\nbru.setEnvVar(\"note_description\", bru.getEnvVar(\"randomValue\")+\" description\");\nbru.setEnvVar(\"note_title\", bru.getEnvVar(\"randomValue\")+\" title\");\n"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseCN = res.getBody();\n\nbru.setEnvVar(\"note_id\", responseCN.data.id);\nbru.setEnvVar(\"note_completed\", responseCN.data.completed);\nbru.setEnvVar(\"note_created_at\", responseCN.data.created_at);\nbru.setEnvVar(\"note_updated_at\", responseCN.data.updated_at);\n\ntest(\"7.1 - Check creates a new note success\", function () {\n    expect(responseCN.success).to.be.equal(true);\n});\ntest(\"7.1 - Check creates a new note status\", function () {\n    expect(responseCN.status).to.be.equal(200);\n});\ntest(\"7.1 - Check creates a new note message\", function () {\n    expect(responseCN.message).to.be.equal(\"Note successfully created\");\n});\ntest(\"7.1 - Assert note title\", function () {\n    expect(bru.getEnvVar(\"note_title\")).to.be.equal(responseCN.data.title);\n});\ntest(\"7.1 - Assert note description\", function () {\n    expect(bru.getEnvVar(\"note_description\")).to.be.equal(responseCN.data.description);\n});\ntest(\"7.1 - Assert note category\", function () {\n    expect(bru.getEnvVar(\"note_category\")).to.be.equal(responseCN.data.category);\n});\ntest(\"7.1 - Assert user id\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseCN.data.user_id);\n});\n\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "7-2 - Creates a new note - bad request",
      "seq": 17,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"a\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseCNBR = res.getBody();\r\n\r\ntest(\"7.2 - Check creates a new note - bad request success\", function () {\r\n    expect(responseCNBR.success).to.be.equal(false);\r\n});\r\ntest(\"7.2 - Check creates a new note - bad request status\", function () {\r\n    expect(responseCNBR.status).to.be.equal(400);\r\n});\r\ntest(\"7.2 - Check creates a new note - bad request message\", function () {\r\n    expect(responseCNBR.message).to.be.equal(\"Category must be one of the categories: Home, Work, Personal\");\r\n});\r\n\r\n\r\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "7-3 - Creates a new note - unauthorized request",
      "seq": 18,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title}}\",\n    \"description\":\"{{note_description}}\",\n    \"category\":\"{{note_category}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseCNUR = res.getBody();\r\n\r\ntest(\"7.3 - Check creates a new note - unauthorized request success\", function () {\r\n    expect(responseCNUR.success).to.be.equal(false);\r\n});\r\ntest(\"7.3 - Check creates a new note - unauthorized request status\", function () {\r\n    expect(responseCNUR.status).to.be.equal(401);\r\n});\r\ntest(\"7.3 - Check creates a new note - unauthorized request message\", function () {\r\n    expect(responseCNUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});\r\n\r\n\r\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "8 - Creates another new note",
      "seq": 19,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "POST",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "json",
          "json": "{\n    \"title\":\"{{note_title_2}}\",\n    \"description\":\"{{note_description_2}}\",\n    \"category\":\"{{note_category_2}}\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {
          "req": "var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\nbru.setEnvVar(\"randomValue\", random.toString());\n\nbru.setEnvVar(\"note_category_2\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\nbru.setEnvVar(\"note_description_2\", bru.getEnvVar(\"randomValue\")+\" description\");\nbru.setEnvVar(\"note_title_2\", bru.getEnvVar(\"randomValue\")+\" title\");"
        },
        "vars": {},
        "assertions": [],
        "tests": "let responseCAN = res.getBody();\n\nbru.setEnvVar(\"note_id_2\", responseCAN.data.id);\nbru.setEnvVar(\"note_completed_2\", responseCAN.data.completed);\nbru.setEnvVar(\"note_created_at_2\", responseCAN.data.created_at);\nbru.setEnvVar(\"note_updated_at_2\", responseCAN.data.updated_at);\n\ntest(\"8 - Check creates another new note success\", function () {\n    expect(responseCAN.success).to.be.equal(true);\n});\ntest(\"8 - Check creates another new note status\", function () {\n    expect(responseCAN.status).to.be.equal(200);\n});\ntest(\"8 - Check creates another new note message\", function () {\n    expect(responseCAN.message).to.be.equal(\"Note successfully created\");\n});\ntest(\"8 - Assert note title\", function () {\n    expect(bru.getEnvVar(\"note_title_2\")).to.be.equal(responseCAN.data.title);\n});\ntest(\"8 - Assert note description\", function () {\n    expect(bru.getEnvVar(\"note_description_2\")).to.be.equal(responseCAN.data.description);\n});\ntest(\"8 - Assert note category\", function () {\n    expect(bru.getEnvVar(\"note_category_2\")).to.be.equal(responseCAN.data.category);\n});\ntest(\"8 - Assert user id\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseCAN.data.user_id);\n});\n\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "9-1 - Get all notes",
      "seq": 20,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGAN = res.getBody();\n\ntest(\"9.1 - Check get all notes success\", function () {\n    expect(responseGAN.success).to.be.equal(true);\n});\ntest(\"9.1 - Check get all notes status\", function () {\n    expect(responseGAN.status).to.be.equal(200);\n});\ntest(\"9.1 - Check get all notes message\", function () {\n    expect(responseGAN.message).to.be.equal(\"Notes successfully retrieved\");\n});\ntest(\"9.1 - Assert note id\", function () {\n    expect(bru.getEnvVar(\"note_id\")).to.be.equal(responseGAN.data[1].id);\n});\ntest(\"9.1 - Assert note title\", function () {\n    expect(bru.getEnvVar(\"note_title\")).to.be.equal(responseGAN.data[1].title);\n});\ntest(\"9.1 - Assert note description\", function () {\n    expect(bru.getEnvVar(\"note_description\")).to.be.equal(responseGAN.data[1].description);\n});\ntest(\"9.1 - Assert note category\", function () {\n    expect(bru.getEnvVar(\"note_category\")).to.be.equal(responseGAN.data[1].category);\n});\ntest(\"9.1 - Assert note completed\", function () {\n    expect(bru.getEnvVar(\"note_completed\")).to.be.equal(responseGAN.data[1].completed);\n});\ntest(\"9.1 - Assert note created_at\", function () {\n    expect(bru.getEnvVar(\"note_created_at\")).to.be.equal(responseGAN.data[1].created_at);\n});\ntest(\"9.1 - Assert note updated_at\", function () {\n    expect(bru.getEnvVar(\"note_updated_at\")).to.be.equal(responseGAN.data[1].updated_at);\n});\ntest(\"9.1 - Assert user id for note\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseGAN.data[1].user_id);\n});\ntest(\"9.1 - Assert note 2 id\", function () {\n    expect(bru.getEnvVar(\"note_id_2\")).to.be.equal(responseGAN.data[0].id);\n});\ntest(\"9.1 - Assert note 2 title\", function () {\n    expect(bru.getEnvVar(\"note_title_2\")).to.be.equal(responseGAN.data[0].title);\n});\ntest(\"9.1 - Assert note 2 description\", function () {\n    expect(bru.getEnvVar(\"note_description_2\")).to.be.equal(responseGAN.data[0].description);\n});\ntest(\"9.1 - Assert note 2 category\", function () {\n    expect(bru.getEnvVar(\"note_category_2\")).to.be.equal(responseGAN.data[0].category);\n});\ntest(\"9.1 - Assert note 2 completed\", function () {\n    expect(bru.getEnvVar(\"note_completed_2\")).to.be.equal(responseGAN.data[0].completed);\n});\ntest(\"9.1 - Assert note 2 created_at\", function () {\n    expect(bru.getEnvVar(\"note_created_at_2\")).to.be.equal(responseGAN.data[0].created_at);\n});\ntest(\"9.1 - Assert note 2 updated_at\", function () {\n    expect(bru.getEnvVar(\"note_updated_at_2\")).to.be.equal(responseGAN.data[0].updated_at);\n});\ntest(\"9.1 - Assert user id for note 2\", function () {\n    expect(bru.getEnvVar(\"user_id\")).to.be.equal(responseGAN.data[0].user_id);\n});\n",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "9-2 - Get all notes - bad request",
      "seq": 21,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          },
          {
            "name": "x-content-format",
            "value": "badRequest",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGANBR = res.getBody();\r\n\r\ntest(\"9.2 - Check get all notes - bad request success\", function () {\r\n    expect(responseGANBR.success).to.be.equal(false);\r\n});\r\ntest(\"9.2 - Check get all notes - bad request status\", function () {\r\n    expect(responseGANBR.status).to.be.equal(400);\r\n});\r\ntest(\"9.2 - Check get all notes - bad request message\", function () {\r\n    expect(responseGANBR.message).to.be.equal(\"Invalid X-Content-Format header, Only application/json is supported.\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "9-3 - Get all notes - unauthorized request",
      "seq": 22,
      "request": {
        "url": "{{base_url}}/notes",
        "method": "GET",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "@{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseGANUR = res.getBody();\r\n\r\ntest(\"9.3 - Check get all notes - unauthorized request success\", function () {\r\n    expect(responseGANUR.success).to.be.equal(false);\r\n});\r\ntest(\"9.3 - Check get all notes - unauthorized request status\", function () {\r\n    expect(responseGANUR.status).to.be.equal(401);\r\n});\r\ntest(\"9.3 - Check get all notes - unauthorized request message\", function () {\r\n    expect(responseGANUR.message).to.be.equal(\"Access token is not valid or has expired, you will need to login\");\r\n});",
        "auth": {
          "mode": "none"
        }
      }
    },
    {
      "type": "http",
      "name": "16-3 - Delete user account",
      "seq": 43,
      "request": {
        "url": "{{base_url}}/users/delete-account",
        "method": "DELETE",
        "headers": [
          {
            "name": "X-Auth-Token",
            "value": "{{user_token}}",
            "enabled": true
          }
        ],
        "params": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "let responseDU = res.getBody();\n\ntest(\"16.3 - Check delete user account success\", function () {\n    expect(responseDU.success).to.be.equal(true);\n});\ntest(\"16.3 - Check delete user account status\", function () {\n    expect(responseDU.status).to.be.equal(200);\n});\ntest(\"16.3 - Check delete user account message\", function () {\n    expect(responseDU.message).to.be.equal(\"Account successfully deleted\");\n});",
        "auth": {
          "mode": "none"
        }
      }
    }
  ],
  "environments": [
    {
      "variables": [
        {
          "name": "base_url",
          "value": "https://practice.expandtesting.com/notes/api",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_name",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_email",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_id",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_password",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "new_user_password",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_token",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_phone",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "user_company",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_category",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_title",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_description",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_id",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_completed",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_created_at",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_updated_at",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_category_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_title_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_description_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_id_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_completed_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_created_at_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "note_updated_at_2",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "randomValue",
          "value": "",
          "enabled": true,
          "secret": false,
          "type": "text"
        }
      ],
      "name": "expandtesting_env"
    }
  ],
  "brunoConfig": {
    "version": "1",
    "name": "expandtesting",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ]
  }
}